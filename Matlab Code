%this section will clear the workspace and close all open objects in matlab
fclose('all');
clc
clear all
%this will print the basic information and initial instructions for the
%program for the user to see
fprintf('Welcome to the 4-12-19 edition of the mechanomyography data acquisition matlab program.\nIf at any time the program or tests have a problem arise the most likely solution will be to close Matlab and start again.\nThis program will collect data from five consecutive tests and save it in a text file.\nThe text file is formatted as follows:\n\nmarker\ttime\txaxis\tyaxis\tzaxis\tEMG\n\nBefore starting please confirm that the equipment is functioning properly.\nThis is currently accomplished through the observation of the Arduino Plotter output.\nIf the data is not coming through clearly it may be necessary to reupload the program (at this time titled zweibi) or to reset the sensors by turning them off and back on again.\nOnce the validity and consistency of data acquisition has been verified please close the Arduino Plotter.\nAt this time we will begin requesting information about the current conditions for the tests.\n');
%this section will ask the user for input information to be used in
%creating the filepath and calculating the weight to be used
tester= input('Please Type the Name of Person Administering Test:','s');
testee =input('Please Type the Name or Designation of Test Subject:','s');
testnum = input('Please Enter what sample number this test will produce:','s');
YrDate= input ('Please Enter the Current Year:','s');
MonDate=input('Please Enter the Numerical Month:','s');
DayDate= input('Please Enter the Current Day as a Number:','s');
fprintf('It is now time to obtain the MVC of the test subject.\nIf the subjects MVC was in excess of 90 lbs please divide the MVC by two and have the subject use a single arm for holding the weights during testing.\n');
MVC = input('Once the MVC has been obtained please enter the weight lifted in lbs:');
%this creates the name of the text file generated by the program it is
%currently saved in the same folder as the program is saved
datastoragefile = [testee '_' testnum '_' YrDate '.' MonDate '.' DayDate '.txt'];
%this line creates an identifier for the data aquisition device and allows
%it to be used later in the code.
aquistiondevice = serial('COM5','BaudRate',250000);
%this section sets the amount of time that the program will sample data and
%the amount of forced resting time before the program will progress
recordingtime = 15;
restingtime = 90;
%this section calculates the weight to be used for each phase of testing
seventyMVC= MVC*.7;
useseventyMVC = round(seventyMVC/5)*5;
fiftyMVC=MVC/2;
usefiftyMVC=round(fiftyMVC/5)*5;
twentyMVC=MVC/5;
usetwentyMVC=round(twentyMVC/5)*5;
%this section initializes the variables which are required for sampling the
%data
datastoragestart = fopen(datastoragefile,'wt');
fopen (aquistiondevice);
time = 0;
tac=0;
%this section contains the prompts for sampling to start and the code for
%aquiring data
fprintf('Testing will now begin.\n To start testing please have the test subject relax and remain still to establish baseline measurements.\n Data sampling will begin when the test administrator presses "enter" and will take 15 seconds to complete.')
pause;
%the first section has special code included in it to account for startup
%time and frequent problems with the first sample

tic;
while toc < (recordingtime+2)
    if toc >= 2
      data = fgetl(aquistiondevice);
      time = num2str(toc-2);
      printdata=['0\t' time '\t' data '\n'];
      fprintf(datastoragestart,printdata);
      while toc-tac < .0019
          pause(.0001);
      end
      tac=toc;
    end
end
%this section indicates that the sampling has completed and sets up for the
%next set of data to be collected. Similar sections are found after each
%test
fprintf('\nBaseline testing is complete the next test should be at 70 percent of the test subjects MVC.\n');
fprintf('\nThe amount of weight to be used was calculated to be:');
disp(useseventyMVC);
%this section prompts the administrator to start the test and collects that
%data once they do
fprintf('\n After the weight has been applied to the testing apparatus press enter to begin collecting data.\n');
 
pause;
 
tac=0;
tic;

while toc < recordingtime
      data = fgetl(aquistiondevice);
      time = num2str(toc);
      printdata=['7\t' time '\t' data '\n'];
      fprintf(datastoragestart,printdata);
      while toc-tac < .0019
          pause(.0001);
      end
      tac=toc;
end
%see previouse two notes
fprintf('\n70 percent MVC testing is complete the next test should be at 50 percent of the test subjects MVC.\n');
fprintf('The amount of weight to be used was calculated to be:');
disp(usefiftyMVC);
fprintf('\nThere is now a mandatory 90 second rest period for the test subject.\n');
%this line enforces a rest period for the test subject
pause(restingtime);
fprintf('\n After the weight has been applied to the testing apparatus press enter to begin collecting data.\n');

pause;
 
tac=0;
tic;

while toc < recordingtime
      data = fgetl(aquistiondevice);
      time = num2str(toc);
      printdata=['5\t' time '\t' data '\n'];
      fprintf(datastoragestart,printdata);
      while toc-tac < .002
          pause(.0001);
      end
      tac=toc;
end
%see previous two notes
fprintf('\n50 percent MVC testing is complete the next test should be at 20 percent of the test subjects MVC.\n');
fprintf('The amount of weight to be used was calculated to be:');
disp(usetwentyMVC);
fprintf('\nThere is now a mandatory 90 second rest period for the test subject.\n');
pause(restingtime);
fprintf('\n After the weight has been applied to the testing apparatus press enter to begin collecting data.\n');
 
pause;
 
tac=0;
tic;

while toc < recordingtime
      data = fgetl(aquistiondevice);
      time = num2str(toc);
      printdata=['2\t' time '\t' data '\n'];
      fprintf(datastoragestart,printdata);
      while toc-tac < .0019
          pause(.0001);
      end
      tac=toc;
end
%see previous two notes
fprintf('\n20 percent MVC testing is complete the final test should mimic the first test.\n The test subject should be relaxed and remain still during the final test.\n');
fprintf('\nThere is now a mandatory 90 second rest period for the test subject.\n');
pause(restingtime);
fprintf('\n The samples may now be taken press enter to begin collecting data');
 
pause;
 
tac=0;
tic;

while toc < recordingtime
      data = fgetl(aquistiondevice);
      time = num2str(toc);
      printdata=['1\t' time '\t' data '\n'];
      fprintf(datastoragestart,printdata);
      while toc-tac < .0019
          pause(.0001);
      end
      tac=toc;
end
%this section indicates all testing is complete
fprintf('\nAll testing is now complete. The subject can be disconnected from the device and be compensated with their promised Peshala Hugs.');
%this section closes the aquisiton device and the text file that was
%created for the data
%fprintf(datastoragestart,'\n\n\n Test Administrator was\t' tester '\n Test Subject was\t' testee '\nThe test was administered on\t' DayDate '.' MonDate '.' YrDate '\n''This is data set\t' testnum '\n');
stopasync(aquistiondevice);
fclose('all');
fclose (aquistiondevice);

%this next section converts the aquired data from the genereated text file
%into arrays for use in analysis

Readfile = fopen(datastoragefile,'r');
currentdata=fgetl(Readfile);
timep=[1 Inf];
xdatp=[1 Inf];
ydatp=[1 Inf];
zdatp=[1 Inf];
EMGp=[1 Inf];
times=[1 Inf];
xdats=[1 Inf];
ydats=[1 Inf];
zdats=[1 Inf];
EMGs=[1 Inf];
timef=[1 Inf];
xdatf=[1 Inf];
ydatf=[1 Inf];
zdatf=[1 Inf];
EMGf=[1 Inf];
timet=[1 Inf];
xdatt=[1 Inf];
ydatt=[1 Inf];
zdatt=[1 Inf];
EMGt=[1 Inf];
timed=[1 Inf];
xdatd=[1 Inf];
ydatd=[1 Inf];
zdatd=[1 Inf];
EMGd=[1 Inf];
Dataptnum=1;
pts=0;
while strncmp(currentdata,'0',1)
    
    linedata = str2num(currentdata);
    pts=size(linedata);
    
    if pts(2) == 6 && linedata(3) < 600000 && linedata(3)> -600000 && linedata(4) < 600000 && linedata(4)> -600000 && linedata(5) < 600000 && linedata(5)> -600000 && linedata(6) < 600000 && linedata(6)> -600000

        timep(Dataptnum)=linedata(2);
        xdatp(Dataptnum)=linedata(3);
        ydatp(Dataptnum)=linedata(4);
        zdatp(Dataptnum)=linedata(5);
        EMGp(Dataptnum)=linedata(6);
        Dataptnum=Dataptnum+1;
    end
    currentdata=fgetl(Readfile);
    ischar(currentdata);
end
Dataptnum=1;
while strncmp(currentdata,'7',1)
    linedata = str2num(currentdata);
    pts=size(linedata);
    
    if pts(2) == 6 && linedata(3) < 600000 && linedata(3)> -600000 && linedata(4) < 600000 && linedata(4)> -600000 && linedata(5) < 600000 && linedata(5)> -600000 && linedata(6) < 600000 && linedata(6)> -600000

       times(Dataptnum)=linedata(2);
        xdats(Dataptnum)=linedata(3);
        ydats(Dataptnum)=linedata(4);
        zdats(Dataptnum)=linedata(5);
        EMGs(Dataptnum)=linedata(6);
        Dataptnum=Dataptnum+1;
    end
    currentdata=fgetl(Readfile);
    ischar(currentdata);
end
Dataptnum=1;
while strncmp(currentdata,'5',1)
    linedata = str2num(currentdata);
    pts=size(linedata);
    if pts(2) == 6 && linedata(3) < 600000 && linedata(3)> -600000 && linedata(4) < 600000 && linedata(4)> -600000 && linedata(5) < 600000 && linedata(5)> -600000 && linedata(6) < 600000 && linedata(6)> -600000
        timef(Dataptnum)=linedata(2);
        xdatf(Dataptnum)=linedata(3);
        ydatf(Dataptnum)=linedata(4);
        zdatf(Dataptnum)=linedata(5);
        EMGf(Dataptnum)=linedata(6);
        Dataptnum=Dataptnum+1;
    end
    currentdata=fgetl(Readfile);
    ischar(currentdata);
end
Dataptnum=1;
while strncmp(currentdata,'2',1)
    linedata = str2num(currentdata);
    pts=size(linedata);
    
    if pts(2) == 6 && linedata(3) < 600000 && linedata(3)> -600000 && linedata(4) < 600000 && linedata(4)> -600000 && linedata(5) < 600000 && linedata(5)> -600000 && linedata(6) < 600000 && linedata(6)> -600000

        timet(Dataptnum)=linedata(2);
        xdatt(Dataptnum)=linedata(3);
        ydatt(Dataptnum)=linedata(4);
        zdatt(Dataptnum)=linedata(5);
        EMGt(Dataptnum)=linedata(6);
        Dataptnum=Dataptnum+1;
    end
    currentdata=fgetl(Readfile);
    ischar(currentdata);
end
Dataptnum=1;
while strncmp(currentdata,'1',1)
    linedata = str2num(currentdata);
    pts=size(linedata);
    
    if pts(2) == 6 && linedata(3) < 600000 && linedata(3)> -600000 && linedata(4) < 600000 && linedata(4)> -600000 && linedata(5) < 600000 && linedata(5)> -600000 && linedata(6) < 600000 && linedata(6)> -600000

        timed(Dataptnum)=linedata(2);
        xdatd(Dataptnum)=linedata(3);
        ydatd(Dataptnum)=linedata(4);
        zdatd(Dataptnum)=linedata(5);
        EMGd(Dataptnum)=linedata(6);
        Dataptnum=Dataptnum+1;
    end
    currentdata=fgetl(Readfile);
    ischar(currentdata);
end
fclose(Readfile);


%this segment converts the bit values from the sensor into acceleration and
%corrects the gain of the EMG signal that is added to improve visiblity in
%the arduino plotter



%Converts arduino signal into m/s^2
xdatp=(xdatp/256000)*9.8;
ydatp=(ydatp/256000)*9.8;
zdatp=(zdatp/256000)*9.8;
%removes gain from EMG signal
EMGp=(EMGp/1000);



%Converts arduino signal into m/s^2
xdats=(xdats/256000)*9.8;
ydats=(ydats/256000)*9.8;
zdats=(zdats/256000)*9.8;
%removes gain from EMG signal
EMGs=(EMGs/1000);


%Converts arduino signal into m/s^2
xdatf=(xdatf/256000)*9.8;
ydatf=(ydatf/256000)*9.8;
zdatf=(zdatf/256000)*9.8;
%removes gain from EMG signal
EMGf=(EMGf/1000);


%Converts arduino signal into m/s^2
xdatt=(xdatt/256000)*9.8;
ydatt=(ydatt/256000)*9.8;
zdatt=(zdatt/256000)*9.8;
%removes gain from EMG signal
EMGt=(EMGt/1000);


%Converts arduino signal into m/s^2
xdatd=(xdatd/256000)*9.8;
ydatd=(ydatd/256000)*9.8;
zdatd=(zdatd/256000)*9.8;
%removes gain from EMG signal
EMGd=(EMGd/1000);



%All FFT calculations are performed here

%xaxis prework test
mxdatp=xdatp-mean(xdatp);
Fs=1/mean(diff(timep));
L=length(timep);
NFFT=2^nextpow2(L);
Y=fft(mxdatp,NFFT)/L;
fmxdatp = Fs/2*linspace(0,1,NFFT/2+1);
FFTmxdatp=2*abs(Y(1:NFFT/2+1));

%y axis prework test
mydatp=ydatp-mean(ydatp);
Fs=1/mean(diff(timep));
L=length(timep);
NFFT=2^nextpow2(L);
Y=fft(mydatp,NFFT)/L;
fmydatp = Fs/2*linspace(0,1,NFFT/2+1);
FFTmydatp=2*abs(Y(1:NFFT/2+1));

%z axis prework test 
mzdatp=zdatp-mean(zdatp);
Fs=1/mean(diff(timep));
L=length(timep);
NFFT=2^nextpow2(L);
Y=fft(mzdatp,NFFT)/L;
fmzdatp = Fs/2*linspace(0,1,NFFT/2+1);
FFTmzdatp=2*abs(Y(1:NFFT/2+1));

%EMG prework test
mEMGp=EMGp-mean(EMGp);
Fs=1/mean(diff(timep));
L=length(timep);
NFFT=2^nextpow2(L);
Y=fft(mEMGp,NFFT)/L;
fmEMGp = Fs/2*linspace(0,1,NFFT/2+1);
FFTmEMGp=2*abs(Y(1:NFFT/2+1));

%x axis 70% MVC test
mxdats=xdats-mean(xdats);
Fs=1/mean(diff(times));
L=length(times);
NFFT=2^nextpow2(L);
Y=fft(mxdats,NFFT)/L;
fmxdats = Fs/2*linspace(0,1,NFFT/2+1);
FFTmxdats=2*abs(Y(1:NFFT/2+1));

%y axis 70% MVC test
mydats=ydats-mean(ydats);
Fs=1/mean(diff(times));
L=length(times);
NFFT=2^nextpow2(L);
Y=fft(mydats,NFFT)/L;
fmydats = Fs/2*linspace(0,1,NFFT/2+1);
FFTmydats=2*abs(Y(1:NFFT/2+1));

%z axis 70% MVC test
mzdats=zdats-mean(zdats);
Fs=1/mean(diff(times));
L=length(times);
NFFT=2^nextpow2(L);
Y=fft(mzdats,NFFT)/L;
fmzdats = Fs/2*linspace(0,1,NFFT/2+1);
FFTmzdats=2*abs(Y(1:NFFT/2+1));

%EMG 70% MVC test
mEMGs=EMGs-mean(EMGs);
Fs=1/mean(diff(times));
L=length(times);
NFFT=2^nextpow2(L);
Y=fft(mEMGs,NFFT)/L;
fmEMGs = Fs/2*linspace(0,1,NFFT/2+1);
FFTmEMGs=2*abs(Y(1:NFFT/2+1));

%x axis 50% MVC test
mxdatf=xdatf-mean(xdatf);
Fs=1/mean(diff(timef));
L=length(timef);
NFFT=2^nextpow2(L);
Y=fft(mxdatf,NFFT)/L;
fmxdatf = Fs/2*linspace(0,1,NFFT/2+1);
FFTmxdatf=2*abs(Y(1:NFFT/2+1));

%y axis 50% MVC test
mydatf=ydatf-mean(ydatf);
Fs=1/mean(diff(timef));
L=length(timef);
NFFT=2^nextpow2(L);
Y=fft(mydatf,NFFT)/L;
fmydatf = Fs/2*linspace(0,1,NFFT/2+1);
FFTmydatf=2*abs(Y(1:NFFT/2+1));

%z axis 50% MVC test
mzdatf=zdatf-mean(zdatf);
Fs=1/mean(diff(timef));
L=length(timef);
NFFT=2^nextpow2(L);
Y=fft(mzdatf,NFFT)/L;
fmzdatf = Fs/2*linspace(0,1,NFFT/2+1);
FFTmzdatf=2*abs(Y(1:NFFT/2+1));

%EMG 50% MVC test
mEMGf=EMGf-mean(EMGf);
Fs=1/mean(diff(timef));
L=length(timef);
NFFT=2^nextpow2(L);
Y=fft(mEMGf,NFFT)/L;
fmEMGf = Fs/2*linspace(0,1,NFFT/2+1);
FFTmEMGf=2*abs(Y(1:NFFT/2+1));

%x axis 20% MVC test
mxdatt=xdatt-mean(xdatt);
Fs=1/mean(diff(timet));
L=length(timet);
NFFT=2^nextpow2(L);
Y=fft(mxdatt,NFFT)/L;
fmxdatt = Fs/2*linspace(0,1,NFFT/2+1);
FFTmxdatt=2*abs(Y(1:NFFT/2+1));

%y axis 20% MVC test
mydatt=ydatt-mean(ydatt);
Fs=1/mean(diff(timet));
L=length(timet);
NFFT=2^nextpow2(L);
Y=fft(mydatt,NFFT)/L;
fmydatt = Fs/2*linspace(0,1,NFFT/2+1);
FFTmydatt=2*abs(Y(1:NFFT/2+1));

%z axis 20% MVC test
mzdatt=zdatt-mean(zdatt);
Fs=1/mean(diff(timet));
L=length(timet);
NFFT=2^nextpow2(L);
Y=fft(mzdatt,NFFT)/L;
fmzdatt = Fs/2*linspace(0,1,NFFT/2+1);
FFTmzdatt=2*abs(Y(1:NFFT/2+1));

%EMG 20% MVC test
mEMGt=EMGt-mean(EMGt);
Fs=1/mean(diff(timet));
L=length(timet);
NFFT=2^nextpow2(L);
Y=fft(mEMGt,NFFT)/L;
fmEMGt = Fs/2*linspace(0,1,NFFT/2+1);
FFTmEMGt=2*abs(Y(1:NFFT/2+1));

%x axis post test
mxdatd=xdatd-mean(xdatd);
Fs=1/mean(diff(timed));
L=length(timed);
NFFT=2^nextpow2(L);
Y=fft(mxdatd,NFFT)/L;
fmxdatd = Fs/2*linspace(0,1,NFFT/2+1);
FFTmxdatd=2*abs(Y(1:NFFT/2+1));

%y axis post test
mydatd=ydatd-mean(ydatd);
Fs=1/mean(diff(timed));
L=length(timed);
NFFT=2^nextpow2(L);
Y=fft(mydatd,NFFT)/L;
fmydatd = Fs/2*linspace(0,1,NFFT/2+1);
FFTmydatd=2*abs(Y(1:NFFT/2+1));

%z axis post test
mzdatd=zdatd-mean(zdatd);
Fs=1/mean(diff(timed));
L=length(timed);
NFFT=2^nextpow2(L);
Y=fft(mzdatd,NFFT)/L;
fmzdatd = Fs/2*linspace(0,1,NFFT/2+1);
FFTmzdatd=2*abs(Y(1:NFFT/2+1));

%EMG post test
mEMGd=EMGd-mean(EMGd);
Fs=1/mean(diff(timed));
L=length(timed);
NFFT=2^nextpow2(L);
Y=fft(mEMGd,NFFT)/L;
fmEMGd = Fs/2*linspace(0,1,NFFT/2+1);
FFTmEMGd=2*abs(Y(1:NFFT/2+1));


%this section plots all of the tests and their FFT 
figure('Name','PreTest Data','NumberTitle','off');
    subplot(4,2,1);
    plot(timep,xdatp);
    title('xaxis Data');
    
    subplot(4,2,2);
    title('x-axis FFT');
    plot(fmxdatp,FFTmxdatp); 
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,3);
    plot(timep,ydatp);
    title('yaxis Data');
    
    subplot(4,2,4);
    plot(fmydatp,FFTmydatp); 
    title('y-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,5);
    plot(timep,zdatp);
    title('zaxis Data');
    
    subplot(4,2,6);
    plot(fmzdatp,FFTmzdatp); 
    title('z-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,7);
    plot(timep,EMGp);
    title('EMG Data');
    
    subplot(4,2,8);
    plot(fmEMGp,FFTmEMGp); 
    title('EMG FFT');
    %xlim([0 100]);
    %ylim([0 5000]);

    
    
figure('Name','70% Test Data','NumberTitle','off');
    subplot(4,2,1);
    plot(times,xdats);
    title('xaxis Data');
    
    subplot(4,2,2);
    plot(fmxdats,FFTmxdats); 
    title('x-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,3);
    plot(times,ydats);
    title('yaxis Data');
    
    subplot(4,2,4);
    plot(fmydats,FFTmydats); 
    title('y-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,5);
    plot(times,zdats);
    title('zaxis Data');
    
    subplot(4,2,6);
    plot(fmzdats,FFTmzdats); 
    title('z-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,7);
    plot(times,EMGs);
    title('EMG Data');
    
    subplot(4,2,8);
    plot(fmEMGs,FFTmEMGs); 
    title('EMG FFT');
    
figure('Name','50% Test Data','NumberTitle','off');
    subplot(4,2,1);
    plot(timef,xdatf);
    title('xaxis Data');
    
    subplot(4,2,2);
    plot(fmxdatf,FFTmxdatf); 
    title('x-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,3);
    plot(timef,ydatf);
    title('yaxis Data');
    
    subplot(4,2,4);
    plot(fmydatf,FFTmydatf); 
    title('y-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,5);
    plot(timef,zdatf);
    title('zaxis Data');
    
    subplot(4,2,6);
    plot(fmzdatf,FFTmzdatf); 
    title('z-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,7);
    plot(timef,EMGf);
    title('EMG Data'); 
    
    subplot(4,2,8);
    plot(fmEMGf,FFTmEMGf); 
    title('EMG FFT');
    
figure('Name','20% Test Data','NumberTitle','off');
    subplot(4,2,1);
    plot(timet,xdatt);
    title('xaxis Data');
    
    subplot(4,2,2);
    plot(fmxdatt,FFTmxdatt); 
    title('x-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);

    
    subplot(4,2,3);
    plot(timet,ydatt);
    title('yaxis Data');
    
    subplot(4,2,4);
    plot(fmydatt,FFTmydatt); 
    title('y-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,5);
    plot(timet,zdatt);
    title('zaxis Data');
    
    subplot(4,2,6);
    plot(fmzdatt,FFTmzdatt); 
    title('z-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,7);
    plot(timet,EMGt);
    title('EMG Data');
    
    subplot(4,2,8);
    plot(fmEMGt,FFTmEMGt); 
    title('EMG FFT');
    
 figure('Name','Post Test Data','NumberTitle','off');
    subplot(4,2,1);
    plot(timed,xdatd);
    title('xaxis Data');
    
    subplot(4,2,2);
    plot(fmxdatd,FFTmxdatd); 
    title('x-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);


    
    subplot(4,2,3);
    plot(timed,ydatd);
    title('yaxis Data');
    
    subplot(4,2,4);
    plot(fmydatd,FFTmydatd); 
    title('y-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);
    
    subplot(4,2,5);
    plot(timed,zdatd);
    title('zaxis Data');
    
    subplot(4,2,6);
    plot(fmzdatd,FFTmzdatd); 
    title('z-axis FFT');
    xlim([0 100]);
    ylim([0 5000]);

    
    subplot(4,2,7);
    plot(timed,EMGd);
    title('EMG Data');
    
    subplot(4,2,8);
    plot(fmEMGd,FFTmEMGd); 
    title('EMG FFT');

%this section will interpolate the seventy percent test
interptimevec=linspace(0,15,30000);%this creates a new time array with a  sampling rate of 2000Hz assuming a 15 second sampling period 
ixdats=interp1(times,xdats,interptimevec);%this line of code creates the interpolated data set
iydats=interp1(times,ydats,interptimevec);
izdats=interp1(times,zdats,interptimevec);
iEMGs=interp1(times,EMGs,interptimevec);

%this section will perform the Pwelch on the seventy percent test
[pspecx,frequex]=pwelch(xdats,1000,500,1000,Fs);
[pspecy,frequey]=pwelch(ydats,1000,500,1000,Fs);
[pspecz,frequez]=pwelch(zdats,1000,500,1000,Fs);
[pspecEMG,frequeEMG]=pwelch(EMGs,1000,500,1000,Fs);

%this section plots the 
figure figure('Name','Seventy Percent MVC Alternate Analysis','NumberTitle','off');
    subplot(4,2,1);
    plot(interptimevec,ixdats);
    title('Interpolated X-Axis Data');
    subplot(4,2,2);
    plot(frequex,10*log10(pspecx));
    title('X-Axis Pwelch');
    xlim([0 100]);
    subplot(4,2,3);
    plot(interptimevec,iydats);
    title('Interpolated Y-Axis Data');
    subplot(4,2,4);
    plot(frequey,10*log10(pspecy));
    title('Y-Axis Pwelch');
    xlim([0 100]);
    subplot(4,2,5);
    plot(interptimevec,izdats);
    title('Interpolated Z-Axis Data');
    subplot(4,2,6);
    plot(frequez,10*log10(pspecz));
    title('Z-Axis Pwelch');
    xlim([0 100]);
    subplot(4,2,7);
    plot(interptimevec,iEMGs);
    title('Interpolated EMG Data');
    subplot(4,2,8);
    plot(frequeEMG,10*log10(pspecEMG));
    xlim([0 100]);
    title('EMG Pwelch');
    
%this should calculate the EMD of the patient     
[Pxyx,F] = cpsd(mEMGs,mxdats,[],[],[],Fs);
[maxim,indexx]=max(abs(Pxyx(3:240)));
shift=radtodeg(angle(Pxyx(indexx)));
shifttimex=((shift/360)/indexx)

[Pxyy,F] = cpsd(mEMGs,mydats,[],[],[],Fs);
[maxim,indexy]=max(abs(Pxyy(3:240)));
shift=radtodeg(angle(Pxyy(indexy)));
shifttimey=((shift/360)/indexy)

[Pxyz,F] = cpsd(mEMGs,mzdats,[],[],[],Fs);
[maxim,indexz]=max(abs(Pxyz(3:240)));
shift=radtodeg(angle(Pxyz(indexz)));
shifttimez=((shift/360)/indexz)

%this will take the standard deviation and provide an estimate of the
%amplitude of the signal

xamp=std(mxdats)/256000
yamp=std(mydats)/256000
zamp=std(mzdats)/256000

%this section will find the peak count of each axis
xpks=findpeaks(mxdats);
ypks=findpeaks(mydats);
zpks=findpeaks(mzdats);

peakcountx=size(xpks)
peakcounty=size(ypks)
peakcountz=size(xzks)

%this section will calcualte the variance of each power spectrum

xvar=var(10*log10(pspecx))
yvar=var(10*log10(pspecy))
zvar=var(10*log10(pspecz))


%this section will calculate the kurtosis of each power specturm

xkur=kurtosis(10*log10(pspecx))
ykur=kurtosis(10*log10(pspecy))
zkur=kurtosis(10*log10(pspecz))

%this section will calculate the Mean frequency of each axis

xmean=meanfreq(xdats)
ymean=meanfreq(ydats)
zmean=meanfreq(zdats)

%this section will calculate the Mean frequency of each axis

xmed=medfreq(xdats)
ymed=medfreq(ydats)
zmed=medfreq(zdats)

%this section should return the peaks the FFT Plot

[xfftpeakmag,xfftpeakloc]=findpeaks(FFTmxdats,'MinPeakHeight',50);
[yfftpeakmag,yfftpeakloc]=findpeaks(FFTmydats,'MinPeakHeight',50);
[zfftpeakmag,zfftpeakloc]=findpeaks(FFTmzdats,'MinPeakHeight',50);



%this will create a file that contains the Features that can be described
%numerically
SaveDataFileName =[testee '_' testnum '_' YrDate '.' MonDate '.' DayDate  '_Numeric_Features.txt'];
SaveData= fopen(SaveDataFileName,'wt');
fprintf(SaveData,'DataType \t X-Axis \t Y-Axis \t Z-Axis \t EMG\n');
fprintf(SaveData,['EMD \t ' shifttimex ' \t ' shifttimey ' \t ' shifttimex '\n']);
fprintf(SaveData,['Amplitude \t ' xamp ' \t ' yamp ' \t ' zamp '\n']);
fprintf(SaveData,['Peakcount \t ' peakcountx ' \t ' peakcounty ' \t ' peakcountz '\n']);
fprintf(SaveData,['Variance \t ' xvar ' \t ' yvar ' \t ' zvar ' \n']);
fprintf(SaveData,['Kurtosis \t ' xkur ' \t ' ykur ' \t ' zkur ' \t EMG\n']);
fprintf(SaveData,['PowSpec Mean \t ' xmean ' \t ' ymean ' \t ' zmean ' \t EMG\n']);
fprintf(SaveData,['PowSpec Median \t ' xmed ' \t ' ymed ' \t ' zmed ' \t EMG\n']);
fprintf(SaveData,['DataType \t ' X-Axis ' \t ' Y-Axis ' \t ' Z-Axis ' \t EMG\n']);
fclose(SaveData);
